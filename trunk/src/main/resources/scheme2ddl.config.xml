<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

    <import resource="classpath:applicationContext.xml"/>


    <bean id="dataSource" class="oracle.jdbc.pool.OracleDataSource">
        <property name="URL" value="jdbc:oracle:thin:@MyOracleHost:1521:MyDB"/>
        <!-- You can choose a DBA user. For example: value="sys as sysdba" -->
        <property name="user" value="scott"/>
        <property name="password" value="tiger"/>
        <property name="connectionCachingEnabled" value="true"/>
    </bean>

    <!-- list of schema for processing, used only if oracle user connected as sysdba-->
    <util:list id="schemaList">
        <!--<value>SCOTT</value>-->
        <!--<value>HR</value>-->
    </util:list>

    <bean id="reader" class="com.googlecode.scheme2ddl.UserObjectReader" scope="step">
        <property name="processPublicDbLinks" value="true"/>
        <property name="processDmbsJobs" value="true"/>
        <!-- The "processUserAndPermissions" workes only for sysdba users -->
        <property name="processUserAndPermissions" value="true"/>
    </bean>

    <bean id="writer" class="com.googlecode.scheme2ddl.UserObjectWriter">
        <property name="outputPath" value="output"/>
    </bean>


    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor">
        <property name="concurrencyLimit" value="4"/>
    </bean>

    <!-- settings for processing SQL objects -->
    <util:map id="settingsUserObjectProcessor">
        <!-- Enables exporting of data tables (and LOB data too in separate files) -->
        <entry key="isExportDataTable" value="false"/>
        <!-- In all filters (includesDataTables, excludesDataTables, excludes) will used the full object name
             like "SCHEMA_NAME.OBJECT_NAME", if processSchemas is not empty  -->
        <entry key="isUsedSchemaNamesInFilters" value="false"/>
    </util:map>

    <!-- http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14258/d_metada.htm#BGBJBFGE -->
    <util:map id="transformParams_for_dbms_metadata">
        <entry key="SEGMENT_ATTRIBUTES" value="FALSE"/>
        <entry key="SQLTERMINATOR" value="TRUE"/>

        <!-- todo before release rollback to previous default behavior, may be created new quick switch for processing containt in separate files-->
        <!-- If TRUE, emit all non-referential table constraints. Defaults to TRUE. -->
        <entry key="CONSTRAINTS" value="FALSE"/>
        <!-- If TRUE, emit all referential constraints (foreign keys). Defaults to TRUE. -->
        <entry key="REF_CONSTRAINTS" value="FALSE"/>
        <!-- If TRUE, emit table constraints as separate ALTER TABLE (and, if necessary, CREATE INDEX) statements. If FALSE, specify table constraints as part of the CREATE TABLE statement. Defaults to FALSE. Requires that CONSTRAINTS be TRUE. -->
        <entry key="CONSTRAINTS_AS_ALTER" value="FALSE"/>
    </util:map>


    <!-- format option for DDL, actually perform only trim for resulting DDL -->
    <bean id="ddlFormatter" class="com.googlecode.scheme2ddl.DDLFormatter">
        <!-- Check it to true if you don't want apply formatting on DMBS_OUTPUT. -->
        <property name="noFormat" value="false"/>
        <!-- The 'isMorePrettyFormat' option adds a smart whitespace indentation and clever new lines  -->
        <property name="isMorePrettyFormat" value="false"/>
    </bean>

    <!-- rules for construct filenames  -->
    <bean id="fileNameConstructor" class="com.googlecode.scheme2ddl.FileNameConstructor">
        <!-- Construct your custom layout from keywords

                schema - schema name in lower case
                type - type name in lower case, for example 'table' or 'index'
                types_plural - type name in plural form in lower case, for xample 'tables' or 'indexes'
                object_name - object name in lower case
                row_id - row identificator name for LOB data (this id is case sensitive)
                ext - extension in lower case
                SCHEMA - schema name in UPPER case
                TYPE - type name in UPPER case, for example 'table' or 'index'
                TYPES_PLURAL - type name in plural form in UPPER case, for xample 'tables' or 'indexes'
                OBJECT_NAME - object name in UPPER case
                EXT - extension in UPPER case

            Keywords escaping is not supported.
            Word in Mixed Case is not keyword
        -->
        <property name="template" value="types_plural/object_name.ext"/>
        <property name="templateForSysDBA" value="SCHEMA/types_plural/object_name.ext"/>

        <property name="templateDataLob" value="types_plural/object_name/row_id.ext"/>
        <property name="templateDataLobForSysDBA" value="SCHEMA/types_plural/object_name/row_id.ext"/>


        <!-- File extension map rules.
        Use predefined 'TOAD' or 'PL/SQL Developer' mapping or create custom mapping -->
        <property name="extensionMap" ref="sql_by_default"/>
    </bean>

    <util:map id="sql_by_default">
        <entry key="DEFAULT">
            <value>sql</value>
        </entry>
    </util:map>

    <!-- File extension map rules like TOAD -->
    <util:map id="toad">
        <!--todo need carefully test -->
        <entry key="DEFAULT">
            <value>sql</value>
        </entry>
        <entry key="PROCEDURE">
            <value>prc</value>
        </entry>
        <entry key="FUNCTION">
            <value>fnc</value>
        </entry>
        <entry key="TRIGGER">
            <value>trg</value>
        </entry>
        <entry key="VIEW">
            <value>vw</value>
        </entry>
        <entry key="PACKAGE">   <!--todo is not the same as Package Specs of TOAD -->
            <value>pks</value>
        </entry>
        <entry key="PACKAGE BODY">
            <value>pkb</value>
        </entry>
    </util:map>

    <!-- File extension map rules like PL/SQL Developer -->
    <util:map id="plsqldeveloper">
        <!--todo need filling and carefully test -->
        <entry key="DEFAULT">
            <value>sql</value>
        </entry>
    </util:map>


    <!-- Specify dependable items for every user object type accordingly with http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14258/d_metada.htm#BGBIEDIA -->
    <util:map id="dependencies">
        <entry key="TABLE">
            <set>
                <value>COMMENT</value>
                <!--value>INDEX</value-->
                <value>OBJECT_GRANT</value>
                <value>TRIGGER</value>
                <value>CONSTRAINT</value>
                <value>REF_CONSTRAINT</value>
            </set>
        </entry>
        <entry key="VIEW">
            <set>
                <value>COMMENT</value>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="MATERIALIZED VIEW">
            <set>
                <value>COMMENT</value>
                <!--value>INDEX</value-->
                <value>MATERIALIZED_VIEW_LOG</value>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="FUNCTION">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="PROCEDURE">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="PACKAGE">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="SYNONYM">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="TYPE">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
        <entry key="SEQUENCE">
            <set>
                <value>OBJECT_GRANT</value>
            </set>
        </entry>
    </util:map>

    <!-- This dependencies will export in separate files. Require for it:
        1) Disable the "REF_CONSTRAINTS" and the "CONSTRAINTS" options in "transformParams_for_dbms_metadata" above
        2) Presence this dependencies in "dependencies" map set above
    -->
    <util:map id="dependenciesInSeparateFiles">
        <entry key="TABLE">
            <set>
                <value>CONSTRAINT</value>
                <value>REF_CONSTRAINT</value>
            </set>
        </entry>
    </util:map>

    <!-- The "includesDataTables" uses for overriding "excludesDataTables" and for limiting number of data tables rows -->
    <!-- "includesDataTables" has more priority then "excludesDataTables" -->
    <util:map id="includesDataTables">
        <entry key="SCOTT.TAB2"><util:properties><prop key="maxRowsExport">3</prop></util:properties></entry>   <!-- The "maxRowsExport" setting limits number of rows  -->
        <entry key="*TAB1"><util:properties/></entry>   <!-- The "maxRowsExport" is unlimited by default -->
    </util:map>

    <!-- Below tables data will exlude from export processing -->
    <util:list id="excludesDataTables">
        <value>TAB3</value>
        <value>SCOTT.TAB1</value>   <!-- SCOTT.TAB1 dont excludes, because contains in includesDataTables -->
    </util:list>


    <!-- Key is the object type,
         Value - is set of patterns for exlude
         Currently only '*' wildcard supported -->
    <util:map id="excludes">
        <entry key="*">
            <set>
                <value>*_*_temp_*</value>
            </set>
        </entry>
        <!--
        <entry key="VIEW">
            <set>
                <value>example_exlude_prefix_*</value>
                <value>*_example_exlude_suffix</value>
            </set>
        </entry>
        -->

        <entry key="TABLE PARTITION"><set><value>*</value></set></entry>
        <entry key="INDEX PARTITION"><set><value>*</value></set></entry>
        <entry key="LOB"><set><value>*</value></set></entry>

        <!--Excluded, because all them persist in PACKAGE and TYPE -->
        <entry key="PACKAGE BODY"><set><value>*</value></set></entry>
        <entry key="TYPE BODY"><set><value>*</value></set></entry>
        <!-- Require for export in separate files
        <entry key="INDEX"><set><value>*</value></set></entry>
        -->
        <!--For removing system types http://www.sql.ru/forum/actualthread.aspx?bid=3&tid=542661&hl=-->
        <entry key="TYPE">
            <set>
                <value>SYSTP*</value>
                <value>*==</value>
                <!--a pipelined function that returns a PL/SQL collection type Oracle will automagically generate a compatible SQL collection type. Exclude them-->
                <value>SYS_PLSQL_*</value>
                <!-- require set the 'isUsedSchemaNamesInFilters' to 'true'
                <value>CTXSYS.SYS_PLSQL*</value>
                -->
            </set>
        </entry>
        <entry key="EDITION"><set><value>*</value></set></entry>
        <entry key="LOB"><set><value>*</value></set></entry>
        <entry key="QUEUE"><set><value>*</value></set></entry>
        <entry key="EVALUATION CONTEXT"><set><value>*</value></set></entry>
        <entry key="RULE SET"><set><value>*</value></set></entry>
        <!-- require set the 'isUsedSchemaNamesInFilters' to 'true'
        <entry key="TABLE">
            <set>
                <value>ORDDATA.ORDDCM_PREFS_DEF_VALUES_TAB</value>
                <value>ORDDATA.ORDDCM_PREFS_VALID_VALUES_TAB</value>
                <value>SYSMAN.MGMT_DELTA_SUMMARY_ERRORS</value>
                <value>SYSMAN.PARAM_VALUES_TAB</value>
            </set>
        </entry>
        -->
    </util:map>


</beans>
